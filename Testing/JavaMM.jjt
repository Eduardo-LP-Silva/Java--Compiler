//Podemos mudar LOOKAHEAD dinamicamente (p.exemplo para int vs int[])
options 
{
    LOOKAHEAD = 1;
}

PARSER_BEGIN(JavaMM)

    import java.io.FileInputStream;

    public class JavaMM
    {
        public static void main(String[] args) throws Exception
        {
            if(args.length < 1)
            {
                System.out.println("Usage: JavaMM <filename>");
                System.exit(1);
            }

            JavaMM parser = new JavaMM(new FileInputStream(args[0]));
            SimpleNode root = parser.Program();

            System.out.println("-----AST-----");
            root.dump(" ");
            
        }
    }

PARSER_END(JavaMM)

SKIP :
{
    " " 
    | "\r" 
    | "\t"
    | "\n"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN:
{
    
    <BOOL: "boolean">
    | <MAIN: "main">
    | <VOID: "void">
    | <STRING: "String">
    | <INT: ("int")>
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <LBRACK: "[">
    | <RBRACK: "]">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <ADD: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <NOT: "!">
    | <EQUAL: "=">
    | <LOWER: "<">
    | <BIGGER: ">">
    | <AND: "&&">
    | <SEMI: ";">
    | <COMMA: ",">
    | <DOT: ".">
    | <RETURN: "return">
    | <PUBLIC: "public">
    | <STAT: "static">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <CLASS: "class">
    | <EXT: "extends">
    | <LENGTH: "length">
    | <LITERAL: (<INTEGER> | <BINARY> | <HEX> | <OCTAL>)>
    | <OCTAL: "0"(["0"-"7"])+>
    | <HEX: "0x"(["0"-"9", "A"-"F"])+>
    | <BINARY: "0b"(["0"-"1"])+>
    | <INTEGER: (<DIGIT>)+>
    | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <LETTER: ["$", "a"-"z", "A"-"Z", "_"]>
    | <DIGIT: ["0"-"9"]>
}

SimpleNode Program(): {} 
{
    ClassDeclaration() <EOF> {return jjtThis;}
}

void ClassDeclaration() #Class: {Token n;}
{
    <CLASS>  n=<IDENTIFIER> {jjtThis.name = n.image;} [<EXT> <IDENTIFIER>] 
    <LBRACE> (VarDeclaration())* (<PUBLIC> (MainDeclaration() | MethodDeclaration()))* <RBRACE>
}

void VarDeclaration() #Var: {Token n; String t;}
{
    t=Type() {jjtThis.type = t;} n=<IDENTIFIER> {jjtThis.name = n.image;} <SEMI>  
}

void MainDeclaration() #Main: {}
{
    <STAT> <VOID> <MAIN> <LPAREN> <STRING> <LBRACK> <RBRACK> <IDENTIFIER> <RPAREN> 
    <LBRACE>  (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RBRACE>  
}

void MethodDeclaration() #void: {}
{
    Type() Method() <RETURN> Expression() <SEMI> <RBRACE>
}

void Method(): {Token n;}
{
    n=<IDENTIFIER> {jjtThis.name = n.image;} <LPAREN> [Arg() 
    (<COMMA> Arg())*] <RPAREN> <LBRACE>  (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void Arg(): {Token n; String t;}
{
    t=Type() {jjtThis.type = t;} n=<IDENTIFIER> {jjtThis.name = n.image;}
}

String Type() #void: {Token t, t1;}
{
    t=<INT> [<LBRACK> t1=<RBRACK> {return "int[]";}] {return t.image;}
    | t=<BOOL> {return t.image;}
    | t=<IDENTIFIER> {return t.image;}
}

void Statement() #void: {}
{
    <LBRACE> (Statement())* <RBRACE>
    | While()
    | If()
    | Stmt()
}

void Stmt(): {Token n, o;}
{
    [LOOKAHEAD(2) n=<IDENTIFIER> {jjtThis.name = n.image;} [<LBRACK> Expression() <RBRACK>] 
    o=<EQUAL> {jjtThis.operator = o.image;}] Expression() <SEMI>
}

void While(): {}
{
    <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void If(): {}
{
    <IF> <LPAREN> Expression() <RPAREN> Statement() Else()
}

void Else(): {}
{
    <ELSE> Statement()
}

void Member(): {Token n;}
{
    <DOT> (n=<LENGTH> {jjtThis.name = n.image;} | 
    n=<IDENTIFIER> {jjtThis.name = n.image;} <LPAREN> [Expression() (<COMMA> Expression())*] <RPAREN>)
}

// Ver como distinguir boolean expressions de arithmetic
void Expression(): {}
{
    EXPR() [<LBRACK> EXPR() <RBRACK> | Member()]
    | <NEW> (<IDENTIFIER> <LPAREN> <RPAREN> | <INT> <LBRACK> Expression() <RBRACK>)
    | <NOT> EXPR()
    /*
    Expression() (<AND> | <LOWER> | <BIGGER> | <ADD> | <SUB> | <MUL> | <DIV>)* Expression()   
    | Expression() <LBRACK> <RBRACK> Expression()
    | Expression() <DOT> "length"
    | Expression() <DOT> <IDENTIFIER> <LPAREN> [Expression() (<COMMA> Expression())*] <RPAREN>
    | <TRUE>
    | <FALSE>
    | <IDENTIFIER>
    | <THIS>
    | <INTEGER>
    | <NEW> <INT> <LBRACK> Expression() <RBRACK>
    | <NEW> <IDENTIFIER> <LPAREN> <RPAREN> //E classes com argumentos no construtor?
    | <NOT> Expression()
    | <LPAREN> Expression() <RPAREN> */
}

/*
void BOOLEAN_EXPR(): {}
{
    [<NOT>] BOOL_EXPR() [<AND> BOOLEAN_EXPR()] //Faltam ()
    | <TRUE>
    | <FALSE>
}

void BOOL_EXPR(): {}
{
    ARIT_EXPR() (<LOWER> | <NOT> <EQUAL>) ARIT_EXPR()
    | <LPAREN> BOOLEAN_EXPR() <RPAREN>
} */


void EXPR(): {}
{
    EXPR_2(1)
    [
        (<ADD> | <SUB> | <LOWER>) EXPR_2(1)
    ]
}

void EXPR_2(int sign): {}
{
    EXPR_3(sign)
    [
        (<MUL> | <DIV> | <AND>) EXPR_3(sign)
    ]
} 

void EXPR_3(int sign): {}
{
    <LITERAL>
    | <THIS>
    | <TRUE>
    | <FALSE>
    | <SUB> EXPR_3(-1)
    | <IDENTIFIER>
}