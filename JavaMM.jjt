//Podemos mudar LOOKAHEAD dinamicamente (p.exemplo para int vs int[])
options 
{
    LOOKAHEAD = 1;
}

PARSER_BEGIN(JavaMM)
    public class JavaMM
    {
        public static void main(String[] args) throws ParserException
        {
            if(args.length < 1)
            {
                System.out.println("Usage: JavaMM <filename>");
                System.exit(1);
            }

            JavaMM parser = new JavaMM(new FileInputStream(args[0]));
            SimpleNode root = parser.Program();

            System.out.println("-----AST-----");
            root.dump(" ");
            
        }
    }

PARSER_END(JavaMM)

SKIP :
{
    " " | "\r" | "\t" | "\n"
    |  <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}





// Ver palavras reservadas
TOKEN:
{
    
    <BOOL: "boolean">
    | <MAIN: "main">
    | <VOID: "void">
    | <STRING: "string">
    | <INT: ("int")>
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <LBRACK: "[">
    | <RBRACK: "]">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <ADD: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <NOT: "!">
    | <EQUAL: "=">
    | <LOWER: "<">
    | <BIGGER: ">">
    | <AND: "&&">
    | <SEMI: ";">
    | <COMMA: ",">
    | <DOT: ".">
    | <RETURN: "return">
    | <PUBLIC: "public">
    | <STAT: "static">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <CLASS: "class">
    | <EXT: "extends">
    //| <INTEGER: (["0"-"9"])+>
    //| <IDENTIFIER: (["a"-"z", "A"-"Z"])+>
}

/* Numeros e identificadores */
TOKEN : {
    < NUM : (<INTEGER>)+ >
    | < #INTEGER : ["0" - "9"] >
    | < IDENTIFIER : (<LETTER>)+ >
    | < #LETTER : ["a" - "z", "A" - "Z"]+>
    
}




SimpleNode Program() #void: {} 
{
    ClassDeclaration() <EOF> {return jjtThis;}
}

void ClassDeclaration() #class_declaration: {}
{
    <CLASS> <IDENTIFIER> [<EXT> <IDENTIFIER>] 
    <LBRACE> (VarDeclaration())* (<PUBLIC> (MainDeclaration() | MethodDeclaration()))* <RBRACE> <SEMI>
}

void VarDeclaration() #var: {}
{
    Type() <IDENTIFIER> <SEMI>  
}

void MainDeclaration() #main: {}
{
    <STAT> <VOID> <MAIN> <LPAREN> <STRING> <LBRACK> <RBRACK> <IDENTIFIER> <RPAREN> 
    <LBRACE>  (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RBRACE> <SEMI>   
}

// Como certificar que o tipo do return Ã© o mesmo que o "return em si"? Prolly so em analise semantica
void MethodDeclaration() #method: {}
{
    (Type() Method() <RETURN> Expression() <SEMI> <RBRACE>
    | <VOID> Method() [<RETURN> <SEMI>] <RBRACE>)
    
}

void Method(): {}
{
    <IDENTIFIER> <LPAREN> [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*] <RPAREN>
    <LBRACE> (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void Type(): {}
{
    <INT> [<LBRACK> <RBRACK>]
    | <BOOL>
    | <IDENTIFIER>
}

void Statement() #void: {}
{
    <LBRACE> (Statement())* <RBRACE>
    | While()
    | If()
    | Expression() <SEMI>
    | <IDENTIFIER> (<EQUAL> Expression() <SEMI> | <LBRACK> Expression() <RBRACK> <EQUAL> Expression() <SEMI>)   
}

void While(): {}
{
    <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void If(): {}
{
    <IF> <LPAREN> Expression() <RPAREN> Statement()
}

void ELSE(): {}
{
    <ELSE> Statement()
}

// Ver como distinguir boolean expressions de arithmetic
void Expression(): {}
{
    <TRUE>
    /*
    Expression() (<AND> | <LOWER> | <BIGGER> | <ADD> | <SUB> | <MUL> | <DIV>)* Expression()   
    | Expression() <LBRACK> <RBRACK> Expression()
    | Expression() <DOT> "length"
    | Expression() <DOT> <IDENTIFIER> <LPAREN> [Expression() (<COMMA> Expression())*] <RPAREN>
    | <TRUE>
    | <FALSE>
    | <IDENTIFIER>
    | <THIS>
    | <INTEGER>
    | <NEW> <INT> <LBRACK> Expression() <RBRACK>
    | <NEW> <IDENTIFIER> <LPAREN> <RPAREN> //E classes com argumentos no construtor?
    | <NOT> Expression()
    | <LPAREN> Expression() <RPAREN> */
}